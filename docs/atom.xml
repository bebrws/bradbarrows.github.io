<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Brad Barrows]]></title>
  <link href="http://bradebarrows.github.io/atom.xml" rel="self"/>
  <link href="http://bradebarrows.github.io/"/>
  <updated>2020-06-19T00:53:26-07:00</updated>
  <id>http://bradebarrows.github.io/</id>
  <author>
    <name><![CDATA[Brad Barrows]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Build your own Arm64 iOS LLDB binary]]></title>
    <link href="http://bradebarrows.github.io/blog/2020/06/17/ioslldb/"/>
    <updated>2020-06-17T18:04:05-07:00</updated>
    <id>http://bradebarrows.github.io/blog/2020/06/17/ioslldb</id>
    <content type="html"><![CDATA[<h2>NOTE: This is actually not fully working..</h2>

<p>Running into this error when running on iOS currently</p>

<pre><code>    : CommandLine Error: Option 'debug-buffer-size' registered more than once!
    LLVM ERROR: inconsistency in registered CommandLine options
    [1]    14671 abort      ./lldb
</code></pre>

<p>Will look into this more though.</p>

<h2>Buildling an ARM64 LLDB binary for iOS off the latest llvm-project commits</h2>

<p>Struggling with building lldb for iOS using the latest llvm from the llvm-project repository? Then checkout the <a href="https://github.com/bebrws/iosLLVMLLDBBuildStruggle">ninja build</a> script I worked over for way too long to get your own build going now!</p>

<p>Well I was too. I am positive I must have missed something with CMake to select the right Platform but I ended up just making modifications to the generated ninja build.ninja file until I got lldb to build</p>

<p>I thought I would just share it in case anyone else want a quick and dirty way to build lldb themselves for iOS.</p>

<p>I am also sharing the CMake files the should be enough to generate a build dir that will build all the other important binaries and libs.</p>

<p>I would just follow my CMake build with the files included here and then copy over the build.ninja file and run a good:</p>

<pre><code>ninja -v lldb
</code></pre>

<p>to get that built!</p>

<p>Hope somebody finds this helpful</p>

<h2>CMake ideas</h2>

<p>Checkout the CMake GUI!!</p>

<p>It is crazy helpful. The tooltip descriptions for what a varivarable does will save you so much time..</p>

<p>Working through different options related to cross copmiling is also much much easier to follow with the GUI. I would recommend it.</p>

<p><a href="https://cmake.org/download/">CMake GUI Download</a></p>

<p>NOTE: That in some cases where you want to change something like the C_FLAGS or the C COMPILER (CMAKE_C_COMPILER I believe) you will need to check the Advanced checkbox.</p>

<p>Then on OSX I have a function in my ~/.zshrc to help me quickly load up a CMake GUI for any build dir that you might find helpful:</p>

<pre><code>    function cmakeGUIDir() {
        nohup /Applications/CMake.app/Contents/MacOS/CMake "$@" &amp;
    }
</code></pre>

<p>Then say your in the llvm-project repository folder. Let&rsquo;s say you want to create a new ios build folder. You can run a quick:</p>

<pre><code>    mkdir -p ios
    cmakeGUIDir ios
</code></pre>

<p>To get up and running with the CMake gui, pointed to the right locations (you probably will need to alter the llvm-project source directory actually but it should be close!)</p>

<p>If you want to just use my CMake configuration that I labored over for a while I think you could create just a dummy CMake build directory like I did above. Configure for Ninja. Run generate. Then copy over all the files from the <a href="https://github.com/bebrws/iosLLVMLLDBBuildStruggle">repo here</a> and goto the menu options</p>

<pre><code>    File -&gt; Reload Cache 
</code></pre>

<p>The important file should be</p>

<pre><code>    CMakeCache.txt
</code></pre>

<p>However I am pretty sure you will run into some issues with the directories. At least with the llvm-project directory and the ios build directory you are targeting here. You might need to search through and replace these directories:</p>

<pre><code>    /Users/bbarrows/repos/llvm-project/ios
    /Users/bbarrows/repos/llvm-project
</code></pre>

<p>Hint: This might be important:</p>

<pre><code>    CMAKE_CACHEFILE_DIR:INTERNAL=/Users/bbarrows/repos/llvm-project/ios
</code></pre>

<p>This is supposed the full path to the CMakeCache.txt file itself so having it be incorrect will probably lead to CMake freaking out. I would deff. start off by changing that one. Really I am hoping someone can get away with just applying the git diff I am about to mention and by using the ninja build script.</p>

<h2>That should work.. right?</h2>

<p>Actually it won&rsquo;t.. There is even more I had to work through to get this built the wrong way. But hey, to get this right it&rsquo;s either your time and effort making your way through the CMake/llvm-project docuumentation (which is actually great if I am being honest) with the sweat on your brow and the taste of blood in your mouth from hours of frustrating documentation pondering followed by modification/build script generation/compilation repitiions or your just going to go along with this.. Maybe working through the puzzle of this broken ninja build is the smartest way.. maybe the wrong way is the right way. I guess my belief is who cares if it gets the job done and it doesn&rsquo;t eat up any more time. And this should deffinately end when I have gotten to the point where solving these error messages no longer seems to be teaching me anything.</p>

<p>Continuuing on..</p>

<p>Let&rsquo;s apply the diff and then you should be able to build.</p>

<p>To apply the diff you will need to:</p>

<pre><code>git apply llvm-project-modifications.diff
</code></pre>

<p>Then try to build with a:</p>

<pre><code>    ninja -v lldb
</code></pre>

<p>Good luck, maybe leave me an angry Github Issue or something if you run into Issues. I would just be some combination of happy and surprised if anyone reads this anyway.</p>

<h2>No BS, how to:</h2>

<p>Apply the diff in your llvm-project repository:</p>

<pre><code>    cp llvm-project-modifications.diff ~/repos/llvm-project/          
    # Above: This is assuming that you have a folder ~/repos/ where you keep all your repositories tucked away

    cd  ~/repos/llvm-project/   
    git apply llvm-project-modifications.diff
</code></pre>

<p>Use my CMake function above to create a dummy iOS build directory:</p>

<pre><code>    mkdir -p ~/repos/llvm-project/ios/
    cmakeGUIDir ~/repos/llvm-project/ios/  
</code></pre>

<p>The copy over the build.ninja file from the folder LLVM11iOSBuildDirectory</p>

<pre><code>    cp LLVM11iOSBuildDirectory/build.ninja ~/repos/llvm-project/ios/
</code></pre>

<p>Then try to build with a:</p>

<pre><code>    cd  ~/repos/llvm-project/ios
    ninja -v lldb
</code></pre>

<p>With good luck that just might work. You can always try to use the CMakeCache.txt file.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ish]]></title>
    <link href="http://bradebarrows.github.io/blog/2020/06/06/ish/"/>
    <updated>2020-06-06T10:40:30-07:00</updated>
    <id>http://bradebarrows.github.io/blog/2020/06/06/ish</id>
    <content type="html"><![CDATA[<h2>Studying Ish</h2>

<p>and <a href="https://github.com/bebrws/x86LinuxUserModeEmu">x86UserModeEmu</a></p>

<h3>The summary</h3>

<p>I have always been interested in Operating Systems, Compilers, Languages, Linux, Emulators, etc etc.. But there really isn&rsquo;t a ton of information about how to go from knowing nothing to writing any one of these things. At least including the intermediate subjects. At some point, I guess we really just have to and are expected to read source code.</p>

<p>I read over a bunch of similar projects, learning about how these things were working from a high level. I really delved into JSLinux for example. It was taking a lot of time though and I wasn&rsquo;t very happy with what I thought I was getting out of it. I thought it would be nice to focus my efforts on something that I can actually use and that has unobfuscated code, some documentation, etc.</p>

<p>Ish met these standards. It is also easy to debug and instrument which was helpful.</p>

<p>At some point I realized that Ish is way more than just an emulator. It, in my humble opinion, is really almost like an entire x86 user mode emulator and an entire Linux kernel (running on top of the iOS API) all in one (kind of crossing off 2 items from the list of things I was interested in). It is really amazing that the vast majority of this was written by one person.</p>

<p>Reading though Ish and looking for a place to start.. learning.. doing anything was tough at first. I realized that the JIT was just beyond me at this point (although I got the basic concepts, I wouldn&rsquo;t be able to write my own from what I read). I found that an interpreted version of Ish was still included in the code that didn&rsquo;t seemed to be in use any more and decided I would try to write my own interpreted Ish from this.</p>

<p>I set out with a few goals. To understand how this worked, the different data structures/algorithms in use, to comment in places I felt might be useful and also to use few macros.</p>

<p>An important part was <em>use a minimal amount of macros</em>. This probably was stupid because now I have probably 12,000 lines of code or so just in one file (CPU.m) that is 65% duplicate (maybe inline functions or something at a later point..).</p>

<h3>Interesting stuff?</h3>

<p>Studying everything I read as I went along I learned that the TLB (Translation Lookaside Buffer) could actually be unnecessary. While a hardware TLB, dedicated hardware that is a small cache for commonly used addresses and meta data, makes sense to me I do not think it is necessary to emulate in this case.. I am hoping to find out if there are any speed improvements from removing it.</p>

<p>I also decided to ditch the classic multi layered page table hierarchy at this point to just use a simple array. I thought this would be great in this case because it showed me how simple the whole page table architecture really can be. That it is just a way to let humans break up memory into consistently sized pieces, re-usably re-locating them in different processes' virtual address space. It also is used to add meta data to these chunks of &ldquo;real&rdquo; memory so that when a process needs to perform a specific operation different protections and optimizations (like copy on write) can be performed.</p>

<p>To retrieve a &ldquo;real&rdquo;/final physical address, the most significant bits are always used to locate the page table entry. This leads to a physical memory address with the least significant bits being an offset into this &ldquo;page&rdquo; of memory.</p>

<p>In 32 bit environments 4096 bytes is a common page table size. 0 -> 4095 can be counted using the first 12 bits. Therefore we can find any offset into a page by masking an address by 0b111111111111 (or 0xFFF)</p>

<pre><code>uint32_t offset = addr &amp; 0b111111111111; 
</code></pre>

<p>and we can find the 32 bit page table entry key by anding the address by 0xFFFFFFFFFFFFF000.</p>

<pre><code>uint32_t page = addr &amp; 0xFFFFFFFFFFFFF000; 
</code></pre>

<p>With this simple array as a page table you could just cut off the first 12 bits to find the correct page table entry. And again, no need to hassle with state of the TLB which is nice and saves some time (and I would love to find out if it was much of a speed improvement).</p>

<p>This is all probably pretty simple stuff but it felt good realizing that these data structures did not need to be as complicated as I had once assumed them to be.</p>

<h3>Readability</h3>

<p>There is really only a handful of opcodes I used macros for. And that could be helpful for learning macros for someone anyway if they were having a hard time finding a project they could read through easily.</p>

<p>I have also messed with Ish enough that I was able to output a few JSON files with the CPU state for each process for every instruction/tick. (I might just push up a branch with the build of Ish I have been using to debug this project with at some point).</p>

<p>I have actually verified that &ldquo;my&rdquo; implementation (in quotes because I had been referencing Ish while working on this, although minimally I hoped) executes correctly up until the first syscall. That is something like 12,000 operations.</p>

<p>I have made a bunch of other small changes as well, mostly just to challenge myself so that I didn&rsquo;t just copy and paste code from Ish over into a new project. My goal was to be able to describe what any particular line of code did, not to be able to write this on my own necessarily. I also thought it would be nice if I could add comments throughout. Particularly in places I thought might be useful, that required me to search for more information, or where I just felt like adding comments.</p>

<p>Here is some code that may or may not end up with comments. More importantly I thought it was easy to read and helped with the MODRM abstraction by removing the need to consider whether or not the the MODRM byte was referencing memory or a register. It shows the use of what most operations involve. Some combination of a register, whatever the &ldquo;MODRM&rdquo; byte says to operate on, and an immediate value.</p>

<pre><code>[self readByteIncIP:&amp;modRMByte];
mrm = [self decodeModRMByte:modRMByte];
regPtr = [self getRegPointer:mrm.reg opSize:32];
if (mrm.type == modrm_register) {
    rmWritePtr = rmReadPtr = [self getRegPointer:mrm.base opSize:32];
    memcpy(&amp;rmReadValue, rmReadPtr, sizeof(uint32_t));
} else {
    addr = [self getModRMAddress:mrm opSize:32];
    if (!(rmReadPtr = [self.task.mem getPointer:addr type:MEM_READ])) {
        return 13;
    }
    memcpy(&amp;rmReadValue, rmReadPtr, sizeof(uint32_t));
    rmWritePtr = [self.task.mem getPointer:addr type:MEM_WRITE];
}

regPtr = [self getRegPointer:mrm.reg opSize:32];
</code></pre>

<p>and this dangling code block which can sometimes be found after the code above:</p>

<pre><code>[self readFourBytesIncIP:&amp;imm32];
</code></pre>

<p>That first block of code is executed after the first opcode byte has been read and we have figured out which opcode we are parsing bytes for. Then that code above starts out by reading in the MODRM byte. This byte will specify the register or the address of the data that will be read or written to (in some cases this address is the value to be used itself which is seen in the LEA operation).</p>

<p>The nice part about this code is that regardless of the branch of logic we take we end up with 2 pointers rmWritePtr and rmReadPtr (this is disregarding the LEA case mentioned above, which is covered by the line assigning the addr variable). Both of which can be used regardless of whether the MODRM byte decided that this was a register operation or a memory operation. This way the code actually performing the operations doesn&rsquo;t need to check the MODRM byte or worry about this difference. When writing the code for a MODRM operation I can just use:</p>

<pre><code>\*(uint32_t \*)rmWritePtr 
</code></pre>

<p>whenever I need to set a R/M OR MODRM value and</p>

<pre><code>\*(uint32_t \*)rmReadPtr 
</code></pre>

<p>whenever I need to read a r/m value.</p>

<p>For example if I had an operation like:</p>

<pre><code>ADD r16/32 r/m16/32  
</code></pre>

<p>This would be asking me to add the value from the register specified in the opcode with with MODRM value and store it in the MODRM location.</p>

<p>I could get the (dumbed down) result with:</p>

<pre><code>\*(uint32_t \*)rmWritePtr = (uint32_t)rmReadValue + \*(uint32_t \*)regPtr
</code></pre>

<p>I thought this would lead to very readable opcodes.</p>

<p>And I showed above how easy it is to read a few bytes from eip to grab an immediate value already.</p>

<p>I added the memcpy in there because I was getting errors about alignment. This meant that the MODRM addresses were resulting in pointers whose addresses were not 4 byte aligned (divisible evenly by 4) for uint32_t&rsquo;s for example. However, now that I think about it, that may and most likely was a bug so hopefully I can remove that ugly code and get it back to:</p>

<pre><code>[self readByteIncIP:&amp;modRMByte];
mrm = [self decodeModRMByte:modRMByte];
regPtr = [self getRegPointer:mrm.reg opSize:32];
if (mrm.type == modrm_register) {
    rmWritePtr = rmReadPtr = [self getRegPointer:mrm.base opSize:32];
    rmReadValue = *(uint32_t *)rmReadPtr;
} else {
    addr = [self getModRMAddress:mrm opSize:32];
    if (!(rmReadPtr = [self.task.mem getPointer:addr type:MEM_READ])) {
        return 13;
    }
    rmReadValue = *(uint32_t *)rmReadPtr;
    rmWritePtr = [self.task.mem getPointer:addr type:MEM_WRITE];
}

regPtr = [self getRegPointer:mrm.reg opSize:8];
</code></pre>

<p>or just remove the rmReadValue altogether which I had originally and always use *(uint32_t *)rmReadPtr in place of needing the line/s:</p>

<pre><code>rmReadValue = *(uint32_t *)rmReadPtr;
</code></pre>

<p>This is probably correct and I am now pretty sure a previous operation had just resulted in an address being off by a few bytes resulting in this mis-alignment and leading to the need for memcpy.</p>

<h3>Finishing up</h3>

<p>The goal would be to get a terminal up if time allows. I would prefer not to hurry through the syscall/Linux kernel aspects of Ish. (I really want to play around with some different virtual memory ideas and to see if removing things like the TLB helps much). For that reason the syscalls may just end up copied over from Ish directly for now but I hope I have time later to learn more about how they work.</p>

<p>The x86 emulation part is running up until the point where the first syscall is executed. This was verified by comparing against the state of Ish. However I am sure there are still bugs in there, especially in the 16 bit version of the opcodes. These have had very little coverage.</p>

<p>The majority of the rest of the work to getting a terminal up (when I would be happy with this) probably lays in finishing off all the syscalls.</p>

<h3>Thanks Ish</h3>

<p>Ish is an amazing project and I am glad that the author has open sourced it. I have learned a lot from reading through it and creating my broken clone. Thank you</p>

<p>Here is a link to my project on github if you are interested.</p>

<p><a href="https://github.com/bebrws/x86LinuxUserModeEmu">x86UserModeEmu</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[summertime]]></title>
    <link href="http://bradebarrows.github.io/blog/2019/12/22/summertime/"/>
    <updated>2019-12-22T12:17:55-08:00</updated>
    <id>http://bradebarrows.github.io/blog/2019/12/22/summertime</id>
    <content type="html"><![CDATA[<p>Trying to learn Summertime on the Cello and wrote out a Tab (missing any time signatures).</p>

<ul>
<li><a href="http://bradebarrows.github.io/summertime/SummerTimeTab.pdf">Summertime - Louis Armstrong and Ella Fitzgerald Cello Tab PDF</a></li>
<li><a href="http://bradebarrows.github.io/summertime/SummerTimeTablEdit.tef">Summertime - Louis Armstrong and Ella Fitzgerald Tab file for TabEdit</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Wireguard]]></title>
    <link href="http://bradebarrows.github.io/blog/2019/12/14/wireguard/"/>
    <updated>2019-12-14T13:14:19-08:00</updated>
    <id>http://bradebarrows.github.io/blog/2019/12/14/wireguard</id>
    <content type="html"><![CDATA[<p>How to setup a Wireguard VPN for free!</p>

<ol>
<li><p>Go grab a free account if you haven&rsquo;t already signed for one from <a href="https://azure.microsoft.com/en-us/free/search/?&amp;ef_id=EAIaIQobChMIs6y5wYe25gIVFtRkCh3jJANyEAAYASABEgK6pvD_BwE:G:s&amp;OCID=AID2000128_SEM_hDTj6HPx&amp;MarinID=hDTj6HPx_287547081826_azure%20free%20account_e_c_TAwBQrMX_44568976297_kwd-300666823650&amp;lnkd=Google_Azure_Brand&amp;gclid=EAIaIQobChMIs6y5wYe25gIVFtRkCh3jJANyEAAYASABEgK6pvD_BwE">Azure</a> or you could use your AWS free compute hours with a small EC2 instance.</p></li>
<li><p>Create a the small VM that fits in the free price range</p></li>
<li><p>Set the networking rules to allow ANY traffic TCP/UDP over port 51820 (Wireguard really only used UDP though I am pretty sure).
In azure you would do this by creating the <a href="https://azuremarketplace.microsoft.com/en-us/marketplace/apps/microsoft.freeaccountvirtualmachine?tab=Overview">Free VM</a> (which can be created with a few clicks from that link after creating your account). Then once the VM is created and ready you and you have a status of &ldquo;Your deployment is complete&rdquo; you can open the &ldquo;Deployment details&rdquo; section and click on the Resource link of Type &ldquo;Microsoft.Compute/virtumachines&rdquo;.</p>

<p>In the left sidebar there will be a link for Networking. Click this.</p>

<p>On the networking page click &ldquo;Add Inbound port rule&rdquo;.</p>

<p>Create a rule with the following:</p>

<pre><code>   Source: Any
   Source port range: *
   Destination: Any
   Desitnation port range: 51820
   Protocal: Any
   Action: Allow
   PriorityL 380
   Name: Port_51820
   Description: Wireguard
</code></pre></li>
<li><p>SSH into your VM.</p></li>
<li><p>Run the following:</p></li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Generate public and private keys
</span><span class='line'>
</span><span class='line'>umask 077
</span><span class='line'>wg genkey | tee privatekey | wg pubkey &gt; publickey
</span><span class='line'>
</span><span class='line'># Run these as root
</span><span class='line'>
</span><span class='line'>sudo su
</span><span class='line'>
</span><span class='line'>cat &lt;&lt; EOF &gt;&gt; /etc/sysctl.conf
</span><span class='line'>net.ipv4.ip_forward=1
</span><span class='line'>net.ipv6.conf.all.forwarding=1
</span><span class='line'>EOF
</span><span class='line'>
</span><span class='line'>add-apt-repository ppa:wireguard/wireguard
</span><span class='line'>apt-get update
</span><span class='line'>apt-get install wireguard
</span><span class='line'>
</span><span class='line'>echo "This is the Server Private Key:"
</span><span class='line'>cat privatekey
</span><span class='line'>
</span><span class='line'>echo "This is the Server Public Key:"
</span><span class='line'>cat publickey
</span><span class='line'>
</span><span class='line'>echo "This will be the Client Private Key if you need to generate one (using the OSX Wireguardd App?):"
</span><span class='line'>wg genkey | sudo tee clientprivatekey
</span><span class='line'>cat clientprivatekey</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Now if you are using the OSX Wireguard App you will create a new &ldquo;empty tunnnel&rdquo; by clicking the bottom left plus button. Paste in the following replacing <IPAddressOfYourServer> with your VM IP and then replace <ClientPrivateKey> with the value from the clientprivatekey file. <ServerPublicKey> will be replaced with the Server Public Key:</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[Interface]
</span><span class='line'>PrivateKey = &lt;ClientPrivateKey&gt;
</span><span class='line'>ListenPort = 21841
</span><span class='line'>Address = 192.168.2.2/32
</span><span class='line'>DNS = 1.1.1.1
</span><span class='line'>
</span><span class='line'>[Peer]
</span><span class='line'>PublicKey = &lt;ServerPublicKey&gt;
</span><span class='line'>AllowedIPs = 0.0.0.0/0, ::/0
</span><span class='line'>Endpoint = &lt;IPAddressOfYourServer&gt;:51820
</span><span class='line'>PersistentKeepalive = 25</span></code></pre></td></tr></table></div></figure>


<ol>
<li>After replacing the values I mentioned and copying this into the Wireguard OSX App you will have a Client Public Key generated. It will be right above the text box you paste the configuration into. Take this value and replace <PublicKeyFromClient> with it. Replace <PrivateKeyfromthe2ndComnmandAbove> with the Server Private Key that was printed out in the last set of commands you ran on the VM. The run the following on your VM:</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cat &lt;&lt; EOF &gt;&gt; /etc/wireguard/wg0.conf
</span><span class='line'>[Interface]
</span><span class='line'>Address = 192.168.2.1
</span><span class='line'>PostUp = iptables -A FORWARD -i wg0 -j ACCEPT; iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE; ip6tables -A FORWARD -i wg0 -j ACCEPT; ip6tables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
</span><span class='line'>PostDown = iptables -D FORWARD -i wg0 -j ACCEPT; iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE; ip6tables -D FORWARD -i wg0 -j ACCEPT; ip6tables -t nat -D POSTROUTING -o eth0 -j MASQUERADE
</span><span class='line'>ListenPort = 51820
</span><span class='line'>PrivateKey = &lt;PrivateKeyfromthe2ndComnmandAbove&gt;
</span><span class='line'>DNS = 1.1.1.1
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>[Peer]
</span><span class='line'>PublicKey = &lt;PublicKeyFromClient&gt;
</span><span class='line'>AllowedIPs = 192.168.2.2/32
</span><span class='line'>EOF
</span></code></pre></td></tr></table></div></figure>


<p>You may also want to setup a firewall on your VM by running:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo ufw allow 22/tcp
</span><span class='line'>sudo ufw allow 51820/udp
</span><span class='line'>sudo ufw enable</span></code></pre></td></tr></table></div></figure>


<p>This is optional.</p>

<ol>
<li>It is time to start the Wiregaurd server.
Run this on your VM:</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo wg-quick up wg0
</span><span class='line'>sudo systemctl enable wg-quick@wg0 # Set wireguard to run on system start
</span><span class='line'>sudo wg show # Check the status</span></code></pre></td></tr></table></div></figure>


<p>Note: after every change to your /etc/wiregaurd/wg0.conf file you will need to bring the wiregaurd service down and back up again:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo wg-quick down wg0
</span><span class='line'>sudo wg-quick up wg0</span></code></pre></td></tr></table></div></figure>


<ol>
<li>You should now be able to go back to you Wireguard client and activate the connection. Google &ldquo;What Is My IP&rdquo; and verify that your IP has changed. You could then also try checking if you have DNS Leaks. Note that I am using Cloudflare DNS. I believe for a really secure VPN you would want to install DNS on your VPN as well but I have not bothered to attempt that yet.</li>
</ol>


<p>Other resources:</p>

<p><a href="https://securityespresso.org/tutorials/2019/03/22/vpn-server-using-wireguard-on-ubuntu/">Another Ubuntu based tutorial</a></p>

<p><a href="https://www.linode.com/docs/networking/vpn/set-up-wireguard-vpn-on-ubuntu/">Linode&rsquo;s tutorial which I had trouble with</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OSX - Manually configuring System Preferences Security And Privacy settings]]></title>
    <link href="http://bradebarrows.github.io/blog/2019/07/01/system-preferences-security-and-privacy-osx/"/>
    <updated>2019-07-01T03:40:47-07:00</updated>
    <id>http://bradebarrows.github.io/blog/2019/07/01/system-preferences-security-and-privacy-osx</id>
    <content type="html"><![CDATA[<p>I have a laptop which I wanted to be able to check the status of remotely.</p>

<p>For remote access on OSX I was using Jump Desktop.I had this same issue with RealVNC and other remote desktop services though.</p>

<p>Specifically, on Catalina I ran into an issue where after installing Jump Desktop Connect. I was not able to add Jump Desktop Connect to my Security And Privacy settings to enable the Screen Recording permission.</p>

<p>After some grepping.I figured out that a sqlite DB exists that contains all the OSX Catalina Security and Privacy settings.</p>

<p>This DB can be opened with:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  sudo sqlite3 /Library/Application\ Support/com.apple.TCC/TCC.db</span></code></pre></td></tr></table></div></figure>


<p>The table of interest is called acccess.</p>

<p>To get some information on this table run:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  PRAGMA table_info(access);
</span><span class='line'>  .schema access</span></code></pre></td></tr></table></div></figure>


<p>And then checking out the already existing Privacy System Preferences is really helpful to figure out what is going on as well;</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>select * from access;</span></code></pre></td></tr></table></div></figure>


<p>From the first command ().schema access), you will see it has the followign columns:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  0|service|TEXT|1||1
</span><span class='line'>  1|client|TEXT|1||2
</span><span class='line'>  2|client_type|INTEGER|1||3
</span><span class='line'>  3|allowed|INTEGER|1||0
</span><span class='line'>  4|prompt_count|INTEGER|1||0
</span><span class='line'>  5|csreq|BLOB|0||0
</span><span class='line'>  6|policy_id|INTEGER|0||0
</span><span class='line'>  7|indirect_object_identifier_type|INTEGER|0||0
</span><span class='line'>  8|indirect_object_identifier|TEXT|0||4
</span><span class='line'>  9|indirect_object_code_identity|BLOB|0||0
</span><span class='line'>  10|flags|INTEGER|0||0
</span><span class='line'>  11|last_modified|INTEGER|1|CAST(strftime('%s','now') AS INTEGER)|0</span></code></pre></td></tr></table></div></figure>


<p>So after figuring out the coumns in this table and with examples from pre existing rows I went about creating my own SQL queries to insert new Privacy options into System Preferences.</p>

<p>I then found a row for a service that had the permissions I wanted for Jump Desktop Connect</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  kTCCServiceScreenCapture|com.apple.screensharing.agent|0|0|1||||UNUSED||0|1573525900</span></code></pre></td></tr></table></div></figure>


<p>And then a row for Jump Desktop Connect itself:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  kTCCServiceAccessibility|com.p5sys.jump.connect|0|1|1|??|||UNUSED||0|1572360434</span></code></pre></td></tr></table></div></figure>


<p>Now I have the client string I need and an example row. I duplicated the screensharing service row but switched out the Jump Desktop Connect client string and ran the following in the sqlite3 client:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  INSERT INTO access (service,client,client_type,allowed,prompt_count,csreq,policy_id,indirect_object_identifier_type,indirect_object_identifier,indirect_object_code_identity,flags,last_modified) VALUES (
</span><span class='line'>  'kTCCServiceScreenCapture','com.p5sys.jump.connect',0,0,1,NULL,NULL,NULL,'UNUSED',NULL,0,1573525900);</span></code></pre></td></tr></table></div></figure>


<p>Then I was able to open System Preferences Security and Privacy settins and enable the Screen Recording permission on the application. It finally was showing the list. I probably could also just run</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  INSERT INTO access (service,client,client_type,allowed,prompt_count,csreq,policy_id,indirect_object_identifier_type,indirect_object_identifier,indirect_object_code_identity,flags,last_modified) VALUES (
</span><span class='line'>  'kTCCServiceScreenCapture','com.p5sys.jump.connect',0,1,1,NULL,NULL,NULL,'UNUSED',NULL,0,1573525900);</span></code></pre></td></tr></table></div></figure>


<p>To automatically enable this setting but I did not test this.</p>

<p>The other day I actually had some trouble screen sharing with Google Chrome as well. To fix this I just needed to figure out the applications &ldquo;client&rdquo; string:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>com.google.Chrome</span></code></pre></td></tr></table></div></figure>


<p>and</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>com.google.Chrome.canary</span></code></pre></td></tr></table></div></figure>


<p>for Chrome Canary.</p>

<p>This I could create Screen Sharing options in the Privay preferences with:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>INSERT INTO access (service,client,client_type,allowed,prompt_count,csreq,policy_id,indirect_object_identifier_type,indirect_object_identifier,indirect_object_code_identity,flags,last_modified) VALUES (
</span><span class='line'>  'kTCCServiceScreenCapture','com.google.Chrome',0,0,1,NULL,NULL,NULL,'UNUSED',NULL,0,1573525900);
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>INSERT INTO access (service,client,client_type,allowed,prompt_count,csreq,policy_id,indirect_object_identifier_type,indirect_object_identifier,indirect_object_code_identity,flags,last_modified) VALUES (
</span><span class='line'>  'kTCCServiceScreenCapture','com.google.Chrome.canary',0,0,1,NULL,NULL,NULL,'UNUSED',NULL,0,1573525900);</span></code></pre></td></tr></table></div></figure>


<p>And I also created Accessibility options with:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>INSERT INTO access (service,client,client_type,allowed,prompt_count,csreq,policy_id,indirect_object_identifier_type,indirect_object_identifier,indirect_object_code_identity,flags,last_modified) VALUES (
</span><span class='line'>  'kTCCServiceAccessibility','com.google.Chrome',0,0,1,NULL,NULL,NULL,'UNUSED',NULL,0,1573525900);
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>INSERT INTO access (service,client,client_type,allowed,prompt_count,csreq,policy_id,indirect_object_identifier_type,indirect_object_identifier,indirect_object_code_identity,flags,last_modified) VALUES (
</span><span class='line'>  'kTCCServiceAccessibility','com.google.Chrome.canary',0,0,1,NULL,NULL,NULL,'UNUSED',NULL,0,1573525900);</span></code></pre></td></tr></table></div></figure>


<p>just in case..</p>
]]></content>
  </entry>
  
</feed>
